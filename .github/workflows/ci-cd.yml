name: Fullstack HR CI/CD (Bash Compatible)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  COMPOSE_FILE: docker-compose.yaml
  COMPOSE_PROJECT: fullstack_hr_pipeline  # Valid project name
  DB_NAME: hrdb
  DB_USER: postgres
  DB_PWD: postgres
  BACKUP_DIR: pg_restore
  BACKUP_FILE: pg_restore/hrdb.backup
  CONTAINER: hr_postgres

jobs:
  deploy:
    runs-on: self-hosted

    defaults:
      run:
        shell: bash

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üßπ Stop existing containers (if any)
      run: |
        echo "Stopping existing containers..."
        docker compose -p "$COMPOSE_PROJECT" -f "$COMPOSE_FILE" down || echo "Teardown ignored"

    - name: üöÄ Start full stack
      run: |
        docker compose -p "$COMPOSE_PROJECT" -f "$COMPOSE_FILE" up -d --build \
          db backend frontend prometheus grafana node-exporter loki promtail swagger nginx
        echo "Waiting for containers to initialize..."
        sleep 15

    - name: ‚è± Wait for DB to be healthy
      run: |
        for i in {1..10}; do
          status=$(docker inspect -f '{{.State.Health.Status}}' "$CONTAINER")
          echo "DB Health: $status"
          [ "$status" == "healthy" ] && break
          sleep 5
        done

    - name: üß™ Check if DB needs restore
      id: db-check
      run: |
        count=$(docker exec "$CONTAINER" psql -U "$DB_USER" -d "$DB_NAME" -tAc \
          "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='public';")
        echo "tables=$count" >> "$GITHUB_OUTPUT"

    - name: üì¶ Restore backup (if needed)
      if: steps.db-check.outputs.tables == '0'
      run: |
        echo "üîÑ Restoring DB..."
        docker exec -e PGPASSWORD="$DB_PWD" "$CONTAINER" \
          psql -U "$DB_USER" -d postgres -c \
          "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname='$DB_NAME' AND pid <> pg_backend_pid();"

        docker exec -e PGPASSWORD="$DB_PWD" "$CONTAINER" \
          psql -U "$DB_USER" -d postgres -c "DROP DATABASE IF EXISTS $DB_NAME;"

        docker exec -e PGPASSWORD="$DB_PWD" "$CONTAINER" \
          psql -U "$DB_USER" -d postgres -c "CREATE DATABASE $DB_NAME;"

        docker cp "$BACKUP_FILE" "$CONTAINER:/tmp/hrdb.backup"

        docker exec -e PGPASSWORD="$DB_PWD" "$CONTAINER" \
          pg_restore --no-owner --clean --if-exists \
          -U "$DB_USER" -d "$DB_NAME" /tmp/hrdb.backup

    - name: üîç Smoke test employee_master
      run: |
        docker exec "$CONTAINER" \
          psql -U "$DB_USER" -d "$DB_NAME" -c \
          "SELECT COUNT(*) AS rows_in_employee_master FROM employee_master;"

    - name: ‚úÖ Done
      run: echo "üì• CI/CD pipeline completed."
