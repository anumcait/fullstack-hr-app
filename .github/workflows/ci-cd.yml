name: Fullstack HR CI/CD (PowerShell)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  COMPOSE_FILE: docker-compose.yaml
  COMPOSE_PROJECT: fullstack-hr-pipeline
  DB_NAME: hrdb
  DB_USER: postgres
  DB_PWD: postgres
  BACKUP_DIR: pg_restore
  BACKUP_FILE: pg_restore/hrdb.backup
  CONTAINER: hr_postgres

jobs:
  deploy:
    runs-on: self-hosted

    defaults:
      run:
        shell: pwsh

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üßπ Shut down containers
      run: |
        try {
          docker compose -p $env:COMPOSE_PROJECT -f $env:COMPOSE_FILE down
        } catch {
          Write-Host "Ignoring errors on shutdown"
        }

    - name: üöÄ Start full stack
      run: |
        docker compose -p $env:COMPOSE_PROJECT -f $env:COMPOSE_FILE up -d --build `
          db backend frontend prometheus grafana node-exporter loki promtail swagger nginx
        Start-Sleep -Seconds 15

    - name: ‚è± Wait for DB to be healthy
      run: |
        for ($i = 0; $i -lt 10; $i++) {
          $status = docker inspect -f '{{.State.Health.Status}}' $env:CONTAINER
          Write-Host "DB Health: $status"
          if ($status -eq "healthy") { break }
          Start-Sleep -Seconds 5
        }

    - name: üß™ Check if DB needs restore
      id: db-check
      run: |
        $count = docker exec $env:CONTAINER psql -U $env:DB_USER -d $env:DB_NAME -tAc `
          "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='public';"
        "tables=$count" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: üì¶ Restore backup (if needed)
      if: steps.db-check.outputs.tables == '0'
      run: |
        Write-Host "üîÑ Restoring DB..."
        docker exec -e PGPASSWORD=$env:DB_PWD $env:CONTAINER `
          psql -U $env:DB_USER -d postgres -c `
          "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname='$env:DB_NAME' AND pid <> pg_backend_pid();"

        docker exec -e PGPASSWORD=$env:DB_PWD $env:CONTAINER `
          psql -U $env:DB_USER -d postgres -c "DROP DATABASE IF EXISTS $env:DB_NAME;"

        docker exec -e PGPASSWORD=$env:DB_PWD $env:CONTAINER `
          psql -U $env:DB_USER -d postgres -c "CREATE DATABASE $env:DB_NAME;"

        docker cp "$env:BACKUP_FILE" "$env:CONTAINER:/tmp/hrdb.backup"

        docker exec -e PGPASSWORD=$env:DB_PWD $env:CONTAINER `
          pg_restore --no-owner --clean --if-exists `
            -U $env:DB_USER -d $env:DB_NAME /tmp/hrdb.backup

    - name: üîç Smoke test employee_master
      run: |
        docker exec $env:CONTAINER `
          psql -U $env:DB_USER -d $env:DB_NAME -c `
          "SELECT COUNT(*) AS rows_in_employee_master FROM employee_master;"

    - name: ‚úÖ Done
      run: echo "üì• CI/CD pipeline completed."
