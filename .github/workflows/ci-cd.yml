name: Fullstack HR CI/CD (Git Bash)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  COMPOSE_FILE: docker-compose.yaml
  COMPOSE_PROJECT: fullstack-hr-pipeline
  DB_NAME: hrdb
  DB_USER: postgres
  DB_PWD: postgres
  BACKUP_DIR: pg_restore
  BACKUP_FILE: pg_restore/hrdb.backup
  CONTAINER: hr_postgres

jobs:
  deploy:
    runs-on: self-hosted

    defaults:
      run:
        shell: bash

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üßπ Shut down containers
        run: |
          echo "Stopping existing containers (if any)..."
          docker compose -p "$COMPOSE_PROJECT" -f "$COMPOSE_FILE" down || echo "Teardown ignored"

      - name: üöÄ Start full stack
        run: |
          echo "Starting the full stack..."
          docker compose -p "$COMPOSE_PROJECT" -f "$COMPOSE_FILE" up -d --build \
            db backend frontend prometheus grafana node-exporter loki promtail swagger nginx
          echo "Sleeping 15 seconds for services to stabilize..."
          sleep 15

      - name: ‚è± Wait for DB to be healthy
        run: |
          echo "Checking database health..."
          for i in {1..10}; do
            STATUS=$(docker inspect -f '{{.State.Health.Status}}' "$CONTAINER")
            echo "Attempt $i: DB Health: $STATUS"
            if [ "$STATUS" = "healthy" ]; then
              echo "Database is healthy."
              break
            fi
            sleep 5
          done

      - name: üß™ Check if DB needs restore
        id: db-check
        run: |
          COUNT=$(docker exec "$CONTAINER" psql -U "$DB_USER" -d "$DB_NAME" -tAc "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='public';")
          echo "tables=$COUNT" >> "$GITHUB_OUTPUT"

      - name: üì¶ Restore backup (if needed)
        if: steps.db-check.outputs.tables == '0'
        run: |
          echo "Restoring DB from backup..."
          docker exec -e PGPASSWORD="$DB_PWD" "$CONTAINER" \
            psql -U "$DB_USER" -d postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname='$DB_NAME' AND pid <> pg_backend_pid();"
          docker exec -e PGPASSWORD="$DB_PWD" "$CONTAINER" \
            psql -U "$DB_USER" -d postgres -c "DROP DATABASE IF EXISTS $DB_NAME;"
          docker exec -e PGPASSWORD="$DB_PWD" "$CONTAINER" \
            psql -U "$DB_USER" -d postgres -c "CREATE DATABASE $DB_NAME;"
          docker cp "$BACKUP_FILE" "$CONTAINER":/tmp/hrdb.backup
          docker exec -e PGPASSWORD="$DB_PWD" "$CONTAINER" \
            pg_restore --no-owner --clean --if-exists -U "$DB_USER" -d "$DB_NAME" /tmp/hrdb.backup

      - name: üîç Smoke test employee_master
        run: |
          echo "Running smoke test query on employee_master..."
          docker exec "$CONTAINER" \
            psql -U "$DB_USER" -d "$DB_NAME" -c "SELECT COUNT(*) AS rows_in_employee_master FROM employee_master;"

      - name: ‚úÖ Done
        run: echo "CI/CD pipeline completed successfully."
