version: '3.9'

services:
  # ────────────── DATABASE (PostgreSQL) ──────────────
  db:
    image: postgres:17
    container_name: hr_postgres
    environment:
      POSTGRES_DB:       hrdb
      POSTGRES_USER:     postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
      #- ./pg_restore:/pg_backup
      - /d/Fullstack-hr-app/pg_restore:/pg_backup
      - ./pgdata-backup:/var/lib/postgresql/data
      #- /d/Fullstack-hr-app/pgdata:/var/lib/postgresql/data
     # - pgdata:/var/lib/postgresql/data
      # optional: mount backup + init script
      # - ./init-scripts/01-restore-db.sh:/docker-entrypoint-initdb.d/01-restore-db.sh:ro
      # - ./pg_restore/hrdb.backup:/pg_restore/hrdb.backup:ro
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 3s
      retries: 10
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks: [hr-network]

  # ────────────── JENKINS (CI/CD) ──────────────
  jenkins:
    build:
      context: .
      dockerfile: Dockerfile.jenkins
    container_name: hr-jenkins
    user: root
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - ./jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/workspace
    networks: [hr-network]
    restart: unless-stopped

  # ────────────── BACKEND ──────────────
  backend:
    build:
      context: ./backend
    container_name: hr-backend
    env_file:
      - ./backend/.env.development
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5000:5000"
    networks: [hr-network]
    restart: unless-stopped

  # ────────────── FRONTEND ──────────────
  frontend:
    build:
      context: ./frontend
    container_name: hr-frontend
    depends_on:
      - backend
    ports:
      - "5173:5173"
    networks: [hr-network]
    restart: unless-stopped

  # ────────────── PROMETHEUS ──────────────
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - /d/Fullstack-hr-app/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks: [hr-network]
    restart: unless-stopped

  # ────────────── GRAFANA ──────────────
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks: [hr-network]
    restart: unless-stopped

  # ────────────── NODE EXPORTER ──────────────
  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks: [hr-network]
    restart: unless-stopped

  # ────────────── LOKI ──────────────
  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks: [hr-network]
    restart: unless-stopped

  # ────────────── PROMTAIL ──────────────
  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - ./promtail-config.yaml:/etc/promtail/config.yaml
    networks: [hr-network]
    restart: unless-stopped

  # ────────────── SWAGGER UI (Optional) ──────────────
  swagger:
    image: swaggerapi/swagger-ui
    container_name: swagger-ui
    environment:
      SWAGGER_JSON: /api/swagger.json
    volumes:
      - ./backend/swagger.json:/api/swagger.json
    ports:
      - "8081:8080"
    networks: [hr-network]
    restart: unless-stopped

  # ────────────── NGINX (Proxy) ──────────────
  nginx:
    image: nginx:latest
    container_name: hr-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks: [hr-network]
    restart: unless-stopped

# ────────────── Networks & Volumes ──────────────
networks:
  hr-network:
    driver: bridge

volumes:
  pgdata:
  prometheus_data:
  grafana_data:
  loki_data:
  jenkins_data:
