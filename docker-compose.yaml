# version: "3.8"

services:
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ DATABASE (PostgreSQL) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  db:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: hrdb
    volumes:
      - pgdata:/var/lib/postgresql/data
      # â†’ ALWAYS an absolute path in CI
      - ${WORKSPACE}/init-scripts/01-restore-db.sh:/docker-entrypoint-initdb.d/01-restore-db.sh:ro
      - ${WORKSPACE}/pg_restore/hrdb.backup:/pg_restore/hrdb.backup:ro
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ BACKEND â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  backend:
    build: ./backend
    environment:
      DB_HOST: db              # <- talk to container, not host
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: root123
      DB_NAME: hrdb
      DB_DIALECT: postgres
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5000:5000"
    restart: unless-stopped

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ FRONTEND â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  frontend:
    build: ./frontend
    depends_on:
      - backend
    ports:
      - "5173:5173"
    restart: unless-stopped
  jenkins:
    build:
      context: .                     # repo root (where Dockerfile.jenkins lives)
      dockerfile: Dockerfile.jenkins
    container_name: hr-jenkins
    user: root                       # so Jenkins can talk to /var/run/docker.sock
    ports:
      - "8080:8080"                  # Jenkins UI
      - "50000:50000"                # JNLP agents (optional)
    volumes:
      - ./jenkins_data:/var/jenkins_home   # persist jobs & plugins
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/workspace                 # pipeline sees repo here
    networks: [ hr-network ]
    restart: unless-stopped

networks:
  hr-network:
    driver: bridge
volumes:
  pgdata:


# version: "3.8"

# # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ VOLUMES â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# volumes:
#   pgdata:            # Persist Postgres tables & indexes
#   jenkins_data:

# # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ NETWORKS â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# networks:
#   hr-network:
#     driver: bridge

# # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ SERVICES â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# services:
#   # ---------- DATABASE (PostgreSQL) ----------
#   db:
#     image: postgres:16
#     # container_name: hr-db
#     environment:
#       POSTGRES_DB: hrdb
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: root123
#     volumes:
#       - pgdata:/var/lib/postgresql/data
#       - ./pg_restore:/pg_restore
#       - ./init-scripts:/docker-entrypoint-initdb.d
#     ports:
#       - "5432:5432"                # optional: pgAdmin access
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres -d hrdb"]
#       interval: 10s
#       retries: 5
#     networks:
#       - hr-network
#     restart: unless-stopped

#   # ---------- BACKEND API ----------
#   backend:
#     build:
#       context: ./backend
#     # container_name: hr-backend
#     env_file:
#       - ./backend/.env.development  # keep secrets here
#     environment:
#       DB_HOST: db
#       DB_PORT: 5432
#       DB_USER: postgres
#       DB_PASS: root123
#       DB_NAME: hrdb
#       DB_DIALECT: postgres
#     depends_on:
#       db:
#         condition: service_healthy
#     ports:
#       - "5000:5000"
#     networks:
#       - hr-network
#     restart: unless-stopped

#   # ---------- FRONTEND ----------
#   frontend:
#     build:
#       context: ./frontend
#     # container_name: hr-frontend
#     depends_on:
#       - backend
#     ports:
#       - "5173:5173"                 # change to "80:80" if nginx prod build
#     networks:
#       - hr-network
#     restart: unless-stopped

 



# services:
#   jenkins:
#     build:
#       context: .
#       dockerfile: Dockerfile.jenkins   # ðŸ‘ˆ build our custom image
#     container_name: jenkins
#     user: root                         # needs root to run docker inside
#     ports:
#       - "8080:8080"
#       - "50000:50000"
#     volumes:
#       - ./jenkins_data:/var/jenkins_home
#       - /var/run/docker.sock:/var/run/docker.sock   # keep this
#       - .:/app
#     restart: unless-stopped


#   backend:
#     build: ./backend
#     container_name: hr-backend
#     ports:
#       - "5000:5000"
#     restart: unless-stopped

#   frontend:
#     build: ./frontend
#     container_name: hr-frontend
#     ports:
#       - "5173:5173"
#     restart: unless-stopped
#     depends_on:
#       - backend


#     networks:
#       - hrnet

#   backend:
#     build: ./backend
#     container_name: hr-backend
#     ports:
#       - "5000:5000"
#     restart: "no"
#     networks:
#       - hrnet

#   frontend:
#     build: ./frontend
#     container_name: hr-frontend
#     ports:
#       - "5173:5173"
#     restart: "no"
#     depends_on:
#       - backend
#     networks:
#       - hrnet

# networks:
#   hrnet:
#     driver: bridge


# services:
#   jenkins:
#     build:
#       context: .
#       dockerfile: Dockerfile.jenkins
#     container_name: jenkins
#     ports:
#       - "8080:8080"
#       - "50000:50000"
#     volumes:
#       - ./jenkins_data:/var/jenkins_home
#       - /var/run/docker.sock:/var/run/docker.sock
#       - .:/app
#     user: root
#     networks:
#       - hrnet
#     restart: unless-stopped

#   backend:
#     build: ./backend
#     container_name: hr-backend
#     ports:
#       - "5000:5000"
#     networks:
#       - hrnet
#     depends_on:
#       - jenkins
#     restart: unless-stopped

#   frontend:
#     build: ./frontend
#     container_name: hr-frontend
#     ports:
#       - "5173:5173"
#     networks:
#       - hrnet
#     depends_on:
#       - backend
#     restart: unless-stopped

#   prometheus:
#     image: prom/prometheus:latest
#     container_name: prometheus
#     ports:
#       - "9090:9090"
#     volumes:
#       - prometheus_data:/etc/prometheus
#       - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
#     networks:
#       - hrnet
#     restart: unless-stopped

#   grafana:
#     image: grafana/grafana:latest
#     container_name: grafana
#     ports:
#       - "3000:3000"
#     volumes:
#       - grafana_data:/var/lib/grafana
#     networks:
#       - hrnet
#     restart: unless-stopped

#   node-exporter:
#     image: prom/node-exporter:latest
#     container_name: node-exporter
#     ports:
#       - "9100:9100"
#     networks:
#       - hrnet
#     restart: unless-stopped

# volumes:
#   jenkins_data:
#   prometheus_data:
#   grafana_data:

# networks:
#   hrnet:
#     driver: bridge
